import{_ as n,c as s,o as a,b as e}from"./app-CPcPz2RP.js";const p="/front-end-docs/assets/SSR-need-BR4AL7Um.jpg",t="/front-end-docs/assets/SSR-render-DdNmAve2.png",l={},c=e('<h2 id="_1-ssr-简介" tabindex="-1"><a class="header-anchor" href="#_1-ssr-简介"><span>1. SSR 简介</span></a></h2><h3 id="_1-1-什么是-ssr" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是-ssr"><span>1.1 什么是 SSR？</span></a></h3><ul><li>对于 SPA 应用，浏览器收到一个静态的 HTML 文件，包含空的 <code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code>；</li><li>对于服务端渲染（Server-Side Rendering，SSR），返回一个<code>带有具体内容的 HTML 字符串</code>给浏览器。</li></ul><p><strong>SSR 渲染流程：</strong></p><ol><li><strong>发送请求，获取数据</strong>：浏览器向服务器发送请求，服务器根据请求的路由匹配相关的路由组件，执行组件的自定义服务端生命周期（例 Nuxt 的 asyncData）或者自定义获取数据的 hook，并且把执行后的数据收集起来，统一在 window 的属性中存储。</li><li><strong>返回静态 html 字符串</strong>：vue 的组件会被 renderToString 渲染成静态 html 字符串，替换掉 index.html 中提前指定的占位代码，然后把 index.html 改变后的静态字符串发给浏览器。</li><li><strong>激活静态的 html</strong>：浏览器将静态 html 激活为能交互的应用，把页面中的 DOM 元素与虚拟 DOM 之间建立联系，为页面中的 dom 元素添加事件绑定。</li></ol><p>一个由服务端渲染的 Vue.js 应用也可以被认为是“同构的（Isomorphic）”或“通用的（Universal）”，因为应用的大部分代码同时运行在服务端和客户端。</p><p>SSR 是基于 vNode 实现的，通过 render 函数将 vNode 解析为真实 DOM。</p><h3 id="_1-2-ssr-与-csr" tabindex="-1"><a class="header-anchor" href="#_1-2-ssr-与-csr"><span>1.2 SSR 与 CSR</span></a></h3><table><thead><tr><th></th><th><div style="width:200px;">服务端渲染（Server Side Render，SSR）</div></th><th><div style="width:200px;">客户端渲染（Client Side Render，CSR）</div></th><th><div style="width:200px;">同构（isomorphic）</div></th></tr></thead><tbody><tr><td>执行过程</td><td><p style="background:#C1E77E;">用户请求网页</p> <p style="background:#FBF5CB;">服务端创建包含数据的 HTML 文件并返回给客户端</p> <p style="background:#FBF5CB;">客户端浏览器能够快速地解析和渲染 HTML 文件，但此时页面不能够被富交互</p> <p style="background:#C1E77E;">浏览器下载 Javascript 资源</p> <p>浏览器开始执行 Javascript</p> <p style="background:#C1E77E;">用户可以与页面交互</p></td><td><p style="background:#C1E77E;">用户请求网页</p> <p>由 CDN 返回已创建好的静态 HTML 文件给客户端</p> <p>客户端浏览器接收到静态 HTML 文件，然后开始请求相应的 CSS、JavaScript 文件，页面为空不可用</p> <p style="background:#C1E77E;">浏览器下载 Javascript 资源</p> <p>浏览器执行 Javascript，开始调用接口，请求数据，页面处于被占位符填充状态（Loading）</p> <p>从服务器获取异步接口数据，浏览器开始渲染页面，在结束渲染后，取消 Loading</p> <p style="background:#C1E77E;">用户可以与页面交互</p></td><td><p style="background:#C1E77E;">用户请求网页</p> <p style="background:#FBF5CB;">服务端创建包含数据的 HTML 文件并返回给客户端</p> <p style="background:#FBF5CB;">客户端浏览器能够快速地解析和渲染 HTML 文件，但此时页面不能够被富交互</p> <p style="background:#C1E77E;">浏览器下载 Javascript 资源</p> <p>浏览器执行 Javascript，客户端 Vue 开始执行，客户端激活</p> <p>从服务器获取非首屏或优先级较低的异步接口数据</p> <p style="background:#C1E77E;">用户可以与页面交互</p></td></tr><tr><td>优缺点</td><td><ul><li> 更好的 SEO；</li> <li>更快的内容到达时间；</li> <li>每次页面跳转都需要重新加载，体验不佳。</li></ul></td><td><ul><li>单页应用（SPA）页面跳转无刷新，用户体验丝滑；</li> <li>比较适合不强调 SEO 的中后台富交互应用；</li> <li>首次页面加载要等到资源都加载执行完，用户才可以进行操作。</li></ul></td><td><ul><li>更好的 SEO；</li> <li>更快的内容到达时间；</li> <li>统一的心智模型：你可以使用相同的语言以及相同的声明式、面向组件的心智模型来开发整个应用，而不需要在后端模板系统和前端框架之间来回切换。</li></ul></td></tr><tr><td>实例</td><td>早期的网易、搜狐等门户网站</td><td>SPA 单页面应用</td><td></td></tr></tbody></table><p>解释：</p><ul><li>更好的 SEO：搜索引擎爬虫抓取工具可以直接查看完全渲染的页面;</li><li>更快的内容到达时间，更快的首屏加载： <ul><li>服务端渲染的 HTML 无需等到所有的 JavaScript 都下载并执行完成之后才显示，所以你的用户将会更快地看到完整渲染的页面。</li><li>数据获取过程在首次访问时在服务端完成，相比于从客户端获取，可能有更快的数据库连接。</li><li>对于缓慢的网络情况或运行缓慢的设备，性能提升更加明显。</li></ul></li></ul><h3 id="_1-3-你真的需要-ssr-或同构吗" tabindex="-1"><a class="header-anchor" href="#_1-3-你真的需要-ssr-或同构吗"><span>1.3 你真的需要 SSR 或同构吗？</span></a></h3><img src="'+p+`" width="70%"><h2 id="_2-vue2-ssr-webpack5" tabindex="-1"><a class="header-anchor" href="#_2-vue2-ssr-webpack5"><span>2.Vue2-SSR-webpack5</span></a></h2><p><a href="https://v2.ssr.vuejs.org/zh/" target="_blank" rel="noopener noreferrer">Vue2 SSR 官方指南</a></p><p><a href="https://github.com/vuejs/vue-hackernews-2.0/tree/master" target="_blank" rel="noopener noreferrer">Vue2 SSR 官方示例</a></p><p><a href="https://juejin.cn/post/7243252896392888377" target="_blank" rel="noopener noreferrer">基于 Webpack5 的 Vue2 SSR 工程实践综述</a></p><h3 id="_2-1-基本用法" tabindex="-1"><a class="header-anchor" href="#_2-1-基本用法"><span>2.1 基本用法</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">npm</span> init</span>
<span class="line"><span class="token function">npm</span> <span class="token function">install</span> vue@2 vue-server-renderer <span class="token parameter variable">--save</span></span>
<span class="line"><span class="token function">npm</span> <span class="token function">install</span> express <span class="token parameter variable">--save</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>编写一个 HTML 模版文件 <code>index.template.html</code>，包含占位符 <code>&lt;!--vue-ssr-outlet--&gt;</code> 和 <code>{{}}</code> 包裹的变量名；</li><li>编写 <code>server.js</code> 启动一个服务；</li><li>监听到请求后，通过 <code>renderer.renderToString</code> 将 Vue 实例转为字符串（该过程中同时处理变量），替换占位符，返回 HTML 字符串。</li></ol><p><code>cd base-demo</code>，运行 <code>node server.js</code>，在浏览器访问 <code>localhost:8080</code>，即可获取到 SSR 的页面。</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre class="language-html"><code><span class="line"><span class="token comment">&lt;!-- index.template.html --&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token comment">&lt;!-- 使用双花括号(double-mustache)进行 HTML 转义插值(HTML-escaped interpolation) --&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>{{ title }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">&lt;!-- 使用三花括号(triple-mustache)进行 HTML 不转义插值(non-HTML-escaped interpolation) --&gt;</span></span>
<span class="line">    {{{ meta }}}</span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token comment">&lt;!--vue-ssr-outlet--&gt;</span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// server.js</span></span>
<span class="line"><span class="token keyword">const</span> Vue <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;vue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> server <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express&quot;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 读取 HTML 字符串</span></span>
<span class="line"><span class="token keyword">const</span> template <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">&quot;./index.template.html&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 创建一个 renderer</span></span>
<span class="line"><span class="token keyword">const</span> renderer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;vue-server-renderer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createRenderer</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  template<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;vue ssr&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">    &lt;meta name=&quot;keyword&quot; content=&quot;vue,ssr&quot;&gt;</span>
<span class="line">    &lt;meta name=&quot;description&quot; content=&quot;vue srr demo&quot;&gt;</span>
<span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span>
<span class="line">    </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">server<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 创建一个 Vue 实例</span></span>
<span class="line">  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">url</span><span class="token operator">:</span> req<span class="token punctuation">.</span>url<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;访问的 URL 是： {{ url }}&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 将 Vue 实例渲染为 HTML</span></span>
<span class="line">  renderer<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> context<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> html</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&quot;Internal Server Error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;listen 8080...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-ssr-架构" tabindex="-1"><a class="header-anchor" href="#_2-2-ssr-架构"><span>2.2 SSR 架构</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">vue2-ssr/</span>
<span class="line">│</span>
<span class="line">├── build/</span>
<span class="line">│ ├── webpack.base.config.js   <span class="token comment"># 基础通用配置，包括开发环境和生产环境</span></span>
<span class="line">│ ├── webpack.client.config.js <span class="token comment"># 客户端配置，用于生成 Client Bundle</span></span>
<span class="line">│ ├── webpack.server.config.js <span class="token comment"># 服务器配置，用于生成 Server Bundle</span></span>
<span class="line">│ └── setup-dev-server.js      <span class="token comment"># 开发环境热更新配置</span></span>
<span class="line">│</span>
<span class="line">├── src/</span>
<span class="line">│ ├── App.vue                  <span class="token comment"># 根组件</span></span>
<span class="line">│ ├── app.js                   <span class="token comment"># 通用 entry</span></span>
<span class="line">│ ├── entry-client.js          <span class="token comment"># client 打包入口，仅运行于浏览器</span></span>
<span class="line">│ ├── entry-server.js          <span class="token comment"># server 打包入口，仅运行于服务器</span></span>
<span class="line">│ ├── router.js                <span class="token comment"># 创建 router 实例</span></span>
<span class="line">│ ├── store.js                 <span class="token comment"># 用于预取数据</span></span>
<span class="line">│ ├── index.template.html      <span class="token comment"># html 模板文件</span></span>
<span class="line">│ └── views/                   <span class="token comment"># 业务代码</span></span>
<span class="line">│   └── home/</span>
<span class="line">│     ├── index.vue</span>
<span class="line">│     └── homeStore.js         <span class="token comment"># 当前业务的 store module</span></span>
<span class="line">│</span>
<span class="line">└── server.js                  <span class="token comment"># 启动后端服务器响应 SSR 请求</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="`+t+`" width="80%"><p>对于客户端应用和服务器应用，都需要 webpack 打包。 服务器需要「Server Bundle」用于服务器端渲染(SSR)，客户端需要「Client Bundle」激活静态的 html 字符串。</p><h3 id="_2-3-app-vue" tabindex="-1"><a class="header-anchor" href="#_2-3-app-vue"><span>2.3 App.vue</span></a></h3><p>App.vue 是 Vue 的根组件，包含 <code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code>。</p><div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token comment">&lt;!-- 根据路由渲染对应的组件 --&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-app-js" tabindex="-1"><a class="header-anchor" href="#_2-4-app-js"><span>2.4 app.js</span></a></h3><p><strong>避免状态单例：</strong> 在纯客户端应用程序中，每个用户会在他们各自的浏览器中使用新的应用程序实例。对于服务器端渲染，必须要求每个请求都应该都是全新的、独立的应用程序实例，而不是单例对象，防止交叉请求造成的状态污染。</p><p>app.js 是我们应用程序的「通用 entry」，在客户端和服务器入口使用，创建根 Vue 实例。</p><p>通过工厂函数 <code>createApp</code> 为每个请求创建新的应用程序、router 和 store 实例。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&quot;./App.vue&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> createRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./router&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./store&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> sync <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vuex-router-sync&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 导出一个工厂函数，用于创建新的应用程序、router 和 store 实例，每次 SSR 请求都会调用</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 创建 router 和 store 实例</span></span>
<span class="line">  <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 同步路由到 store：将路由的 $route 设置为 store 的状态 \`store.state.route\`</span></span>
<span class="line">  <span class="token function">sync</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> router<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 创建应用程序实例</span></span>
<span class="line">  <span class="token comment">// 将 router、store、ssr context 注入到所有子组件，确保 \`this.$router\` and \`this.$store\` 在所有组件都可以使用</span></span>
<span class="line">  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    router<span class="token punctuation">,</span></span>
<span class="line">    store<span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">h</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 导出 app、router、store</span></span>
<span class="line">  <span class="token comment">// 在这里不挂载 app，因为在服务器和客户端的处理是不同的</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span> app<span class="token punctuation">,</span> router<span class="token punctuation">,</span> store <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-router-js" tabindex="-1"><a class="header-anchor" href="#_2-5-router-js"><span>2.5 router.js</span></a></h3><ul><li>在 router.js 中，导出一个 createRouter 函数，用于创建一个新的 router 实例；</li><li>在 SSR 中，vue-router 只能采用 history 模式，因为在 hash 模式下，页面 URL 的 hash 内容并不会随着请求一起发送到服务器中；</li><li>使用异步组件实现代码分割和懒加载，有助于减少浏览器在初始渲染中下载的资源体积，改善可交互时间 TTI。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">&quot;vue-router&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 导出一个 createRouter 函数，用于创建一个新的 router 实例</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;history&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// 使用异步组件</span></span>
<span class="line">    <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;./views/home/index.vue&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-数据预取-store-js" tabindex="-1"><a class="header-anchor" href="#_6-数据预取-store-js"><span>6. 数据预取 store.js</span></a></h2><p>在服务端渲染之前预取数据，保存在 store 中，服务端和客户端都从 store 中获取数据。</p><p>为什么需要预取数据？</p><ul><li>服务器端渲染本质上是渲染应用程序的“快照”，如果应用程序依赖于一些异步数据，需要在渲染前预取数据。</li><li>在客户端挂载 DOM，需要获取到与服务器端应用程序完全相同的数据。</li></ul><p>store.js 的 module 可以放在每个业务的文件夹中。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// src/store.js</span></span>
<span class="line"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">&quot;vuex&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> homeStore <span class="token keyword">from</span> <span class="token string">&quot;./views/home/homeStore&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      homeStore<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// src/views/home/homeStore.js</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">namespaced</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">item</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">fetchItem</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> commit <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// \`store.dispatch()\` 会返回 Promise，以便我们能够知道数据在何时更新</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&quot;setItem&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">item</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;Hello&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">setItem</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> <span class="token punctuation">{</span> item <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      state<span class="token punctuation">.</span>item <span class="token operator">=</span> item<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在组件中 dispatch 数据预取的 action。</p><p>在组件中暴露一个自定义静态函数 asyncData，在组件实例化之前调用，它无法访问 this，需要将 store 和路由信息作为参数传递进去。</p><div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="line"><span class="token comment">&lt;!-- src/views/home/index.vue --&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{ item?.title }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> createNamespacedHelpers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vuex&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> mapState <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">createNamespacedHelpers</span><span class="token punctuation">(</span><span class="token string">&quot;homeStore&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">asyncData</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> store<span class="token punctuation">,</span> route <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 触发 action 后，会返回 Promise</span></span>
<span class="line">    <span class="token keyword">return</span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">&quot;homeStore/fetchItem&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;item&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-entry-server-js" tabindex="-1"><a class="header-anchor" href="#_7-entry-server-js"><span>7. entry-server.js</span></a></h2><p>服务器 entry 根据 Vue 实例生成 HTML 字符串。</p><ol><li>创建和返回应用程序实例</li><li>服务端路由匹配：调用 router.onReady，等待 router 将可能的异步组件和钩子函数解析完，才能正确地调用组件中可能存在的路由钩子</li><li>数据预取： <ol><li>通过 router.getMatchedComponents() 获得相匹配的组件，如果组件暴露出 asyncData，我们就调用这个方法。</li><li>然后我们需要将解析完成的状态，附加到 context.state 中。</li></ol></li></ol><p>使用 default export 导出函数，并在每次渲染中重复调用此函数。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./app&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 因为组件可能是动态的，且 asyncData 获取数据是异步的，所以返回一个 Promise。</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> app<span class="token punctuation">,</span> router<span class="token punctuation">,</span> store <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 设置服务器端 router 的位置</span></span>
<span class="line">    router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 等到 router 将可能的异步组件和钩子函数解析完</span></span>
<span class="line">    router<span class="token punctuation">.</span><span class="token function">onReady</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> matchedComponents <span class="token operator">=</span> router<span class="token punctuation">.</span><span class="token function">getMatchedComponents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// 匹配不到的路由，执行 reject 函数，并返回 404</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matchedComponents<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">404</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// 对所有匹配的路由组件调用 \`asyncData()\`</span></span>
<span class="line">      Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span></span>
<span class="line">        matchedComponents<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">Component</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>Component<span class="token punctuation">.</span>asyncData<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> Component<span class="token punctuation">.</span><span class="token function">asyncData</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">              store<span class="token punctuation">,</span></span>
<span class="line">              <span class="token literal-property property">route</span><span class="token operator">:</span> router<span class="token punctuation">.</span>currentRoute<span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token comment">// 在所有预取钩子asyncData resolve 后，store 已经填充入渲染应用程序所需的状态。</span></span>
<span class="line">          <span class="token comment">// 当我们将状态附加到上下文，并且 \`template\` 选项用于 renderer 时，</span></span>
<span class="line">          <span class="token comment">// context.state 将作为 window.__INITIAL_STATE__ 状态，自动嵌入到最终的 HTML 中</span></span>
<span class="line">          context<span class="token punctuation">.</span>state <span class="token operator">=</span> store<span class="token punctuation">.</span>state<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">          <span class="token comment">// Promise 应该 resolve 应用程序实例，以便它可以渲染</span></span>
<span class="line">          <span class="token function">resolve</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>reject<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-entry-client-js" tabindex="-1"><a class="header-anchor" href="#_8-entry-client-js"><span>8. entry-client.js</span></a></h2><p>客户端 entry 用于创建 Vue 实例，将其挂载到 DOM 中。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./app&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> app<span class="token punctuation">,</span> router<span class="token punctuation">,</span> store <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 在挂载到应用程序之前，store 就应该获取到状态，设置 store.state</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>__INITIAL_STATE__<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  store<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>__INITIAL_STATE__<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">router<span class="token punctuation">.</span><span class="token function">onReady</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  app<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-webpack-配置" tabindex="-1"><a class="header-anchor" href="#_10-webpack-配置"><span>10. webpack 配置</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 生成 package.json</span></span>
<span class="line"><span class="token function">npm</span> init</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Vue 全家桶</span></span>
<span class="line"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> vue@2 vue-server-renderer</span>
<span class="line"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> vue-router@3</span>
<span class="line"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> vuex@3</span>
<span class="line"></span>
<span class="line"><span class="token comment"># webpack</span></span>
<span class="line"><span class="token function">npm</span> <span class="token function">install</span> --save-dev webpack webpack-cli webpack-merge</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 基础配置：处理 Vue、JS、CSS</span></span>
<span class="line"><span class="token function">npm</span> <span class="token function">install</span> --save-dev vue-loader@15 vue-template-compiler</span>
<span class="line"><span class="token function">npm</span> <span class="token function">install</span> --save-dev babel-loader @babel/core @babel/preset-env</span>
<span class="line"><span class="token function">npm</span> <span class="token function">install</span> --save-dev vue-style-loader css-loader less-loader</span>
<span class="line"><span class="token function">npm</span> <span class="token function">install</span> --save-dev mini-css-extract-plugin</span>
<span class="line"><span class="token function">npm</span> <span class="token function">install</span> --save-dev css-minimizer-webpack-plugin</span>
<span class="line"></span>
<span class="line"><span class="token function">npm</span> <span class="token function">install</span> express <span class="token parameter variable">--save</span></span>
<span class="line"><span class="token function">npm</span> <span class="token function">install</span> --save-dev sw-precache-webpack-plugin</span>
<span class="line"><span class="token function">npm</span> <span class="token function">install</span> cross-env --save-dev</span>
<span class="line"><span class="token function">npm</span> <span class="token function">install</span> vuex-router-sync</span>
<span class="line"><span class="token function">npm</span> <span class="token function">install</span> webpack-node-externals --save-dev</span>
<span class="line"><span class="token function">npm</span> <span class="token function">install</span> compression</span>
<span class="line"><span class="token function">npm</span> <span class="token function">install</span> chokidar</span>
<span class="line"><span class="token function">npm</span> i memory-fs</span>
<span class="line"><span class="token function">npm</span> <span class="token function">install</span> webpack-dev-middleware --save-dev</span>
<span class="line"><span class="token function">npm</span> <span class="token function">install</span> webpack-hot-middleware --save-dev</span>
<span class="line"><span class="token function">npm</span> <span class="token function">install</span> lru-cache <span class="token parameter variable">--save</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-1-基础通用配置" tabindex="-1"><a class="header-anchor" href="#_10-1-基础通用配置"><span>10.1 基础通用配置</span></a></h3><p>基础配置和普通项目的 webpack 配置类似，区分开发环境配置和生产环境配置。</p><p>主要是配置内容包括：</p><ul><li>出入口</li><li>loader 配置</li><li>开发环境的热更新、source-map 等配置</li><li>生产环境的优化配置</li><li>关于 node 的特殊处理</li></ul><p>在 SSR 模式下，关于样式文件的 loader 应采用 <code>vue-style-loader</code>。它和 style-loader 的不同在于：它支持 vue ssr。（via vuejs/vue-style-loader: 💅 vue style loader module for webpack (github.com) ）</p><h3 id="_10-2-客户端配置" tabindex="-1"><a class="header-anchor" href="#_10-2-客户端配置"><span>10.2 客户端配置</span></a></h3><h3 id="_10-3-服务器配置" tabindex="-1"><a class="header-anchor" href="#_10-3-服务器配置"><span>10.3 服务器配置</span></a></h3><h2 id="_10-setup-dev-server-js" tabindex="-1"><a class="header-anchor" href="#_10-setup-dev-server-js"><span>10.setup-dev-server.js</span></a></h2><p>通过服务器配置生成 vue-ssr-server-bundle.json。</p><p>已知，SSR 的渲染关键在于 renderer.renderToString，renderer 是由 createBundleRenderer 创建而来，createBundleRenderer 函数需要传入 bundle clientManifest 等实参。 因此，如果想在改完代码后拿到最新的内容，我们需要做以下事情：</p><p>声明一个 renderer 构建 server，在文件修改时重新编译，构建完成时想办法拿到最新的 bundle 构建 client，在文件修改时重新编译，构建完成时想办法拿到最新的 clientManifest 拿到最新的 bundle 和 clientManifest 后，通过 createBundleRenderer 将 renderer 替换 拿到最新的 renderer 执行 renderer.renderToString</p><p>以上就是 setup-dev-server.js 要做的工作。</p><h2 id="_9-server-js" tabindex="-1"><a class="header-anchor" href="#_9-server-js"><span>9. server.js</span></a></h2><p>核心步骤就是配置服务端和客户端的 webpack 配置，然后分别打包后传入 vue-server-renderer 再发送给浏览器</p><p>这个是最主要的文件了，整体的逻辑就是获取 Server Bundle 和 Client Bundle，还有 template，其中 template 是 html 的模板，Server Bundle 和 Client Bundle 由于还没输出到文件系统，所以分别利用了 webpack-dev-middleware 和 memory-fs 的文件系统，直接从内存的 webpack compiler 对象中读取。最后一个注意的点就是因为是开发环境，热更新这个问题要注意以下 ，比如 Client Bundle 是使用了 webpack-dev-middleware 编译的，Server Bundle 则是用了 webpack Compiler.watch 进行文件变更监听，同时，监听到文件的变更之后，对应的 renderer 也要更新，所以这里切忌不要用 readyPromise 来传入 renderer 给到 express 中间件，否则就没有热更新了。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">const { createBundleRenderer } = require(&#39;vue-server-renderer&#39;)</span>
<span class="line">// 模板</span>
<span class="line">const template = require(&#39;fs&#39;).readFileSync(&#39;/path/to/template.html&#39;, &#39;utf-8&#39;)</span>
<span class="line">// 服务端webpack配置</span>
<span class="line">const serverBundle = require(&#39;/path/to/vue-ssr-server-bundle.json&#39;)</span>
<span class="line">// 客户端webpack配置</span>
<span class="line">const clientManifest = require(&#39;/path/to/vue-ssr-client-manifest.json&#39;)</span>
<span class="line"></span>
<span class="line">// createBundleRenderer内调用了vue-server-renderer插件用来生成html字符串</span>
<span class="line">const renderer = createBundleRenderer内调用了(serverBundle, {</span>
<span class="line">  template,</span>
<span class="line">  clientManifest</span>
<span class="line">})</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> createApp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> createApp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;/path/to/built-server-bundle.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">server<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">url</span><span class="token operator">:</span> req<span class="token punctuation">.</span>url <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">createApp</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    renderer<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> html</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">404</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&quot;Page not found&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">          res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&quot;Internal Server Error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_13-客户端激活" tabindex="-1"><a class="header-anchor" href="#_13-客户端激活"><span>13. 客户端激活</span></a></h2><p>客户端激活是指，Vue 在浏览器端接管由服务端发送的静态 HTML，使其变为由 Vue 管理的动态 DOM 的过程。</p><p>服务器已经渲染好了 HTML，无需将其丢弃再重新创建所有的 DOM 元素，只需要“激活”这些静态的 HTML，然后使他们成为动态的（能够响应后续的数据变化）。</p><p>在 entry-client.js 中，我们用下面这行挂载(mount)应用程序：</p><p>app.$mount(&#39;#app&#39;)</p><p>如果你检查服务器渲染的输出结果，你会注意到应用程序的根元素上添加了一个特殊的属性：</p><p><code>&lt;div id=&quot;app&quot; data-server-rendered=&quot;true&quot;&gt;</code> data-server-rendered 特殊属性，让客户端 Vue 知道这部分 HTML 是由 Vue 在服务端渲染的，并且应该以激活模式进行挂载。注意，这里并没有添加 id=&quot;app&quot;，而是添加 data-server-rendered 属性：你需要自行添加 ID 或其他能够选取到应用程序根元素的选择器，否则应用程序将无法正常激活。</p><p>注意，在没有 data-server-rendered 属性的元素上，还可以向 $mount 函数的 hydrating 参数位置传入 true，来强制使用激活模式(hydration)：</p><p>// 强制使用应用程序的激活模式 app.$mount(&#39;#app&#39;, true) 在开发模式下，Vue 将推断客户端生成的虚拟 DOM 树 (virtual DOM tree)，是否与从服务器渲染的 DOM 结构 (DOM structure) 匹配。如果无法匹配，它将退出混合模式，丢弃现有的 DOM 并从头开始渲染。在生产模式下，此检测会被跳过，以避免性能损耗。</p><h1 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h1><ul><li>在服务端禁用响应式 <ul><li>在服务端渲染时，已经预取数据，不需要响应式。</li></ul></li><li>只有 beforeCreate 和 created 生命周期钩子函数会在服务器端渲染过程中被调用 <ul><li>应该避免在 beforeCreate 和 created 生命周期时产生全局副作用的代码，例如在其中使用 setInterval 设置 timer。由于服务端不会调用销毁钩子函数，timer 将永远保留下来。为了避免这种情况，请将副作用代码移动到 beforeMount 或 mounted 生命周期中。</li></ul></li><li>通用代码不应访问特定平台 API <ul><li>比如 window 或 document，这种仅浏览器可用的全局变量，则会在 Node.js 中执行时抛出错误，反之也是如此。</li><li>对于共享于服务器和客户端，但用于不同平台 API 的任务(task)，建议使用能够兼容二者的三方库，例如 axios。</li><li>对于仅浏览器可用的 API，通常在纯客户端的生命周期钩子函数中惰性访问它们。</li></ul></li><li>自定义指令 <ul><li>大多数自定义指令直接操作 DOM，因此会在服务器端渲染 (SSR) 过程中导致错误。有两种方法可以解决这个问题：</li></ul></li></ul><p>推荐使用组件作为抽象机制，并运行在「虚拟 DOM 层级(Virtual-DOM level)」（例如，使用渲染函数(render function)）。</p><p>如果你有一个自定义指令，但是不是很容易替换为组件，则可以在创建服务器 renderer 时，使用 directives 选项所提供&quot;服务器端版本(server-side version)&quot;。</p><h2 id="_3-使用-webpack-构建配置" tabindex="-1"><a class="header-anchor" href="#_3-使用-webpack-构建配置"><span>3. 使用 webpack 构建配置</span></a></h2><p><a href="https://cn.vuejs.org/guide/scaling-up/ssr" target="_blank" rel="noopener noreferrer">Vue3 SSR 官方指南</a></p><h2 id="动态注册-store-中的-module" tabindex="-1"><a class="header-anchor" href="#动态注册-store-中的-module"><span>动态注册 store 中的 module</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// src/store.js</span></span>
<span class="line"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">&quot;vuex&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> homeStore <span class="token keyword">from</span> <span class="token string">&quot;./views/home/homeStore&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      homeStore<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="line"><span class="token comment">&lt;!-- src/views/home/index.vue --&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{ item?.title }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line"><span class="token keyword">import</span> homeStoreModule <span class="token keyword">from</span> <span class="token string">&quot;./homeStore&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> createNamespacedHelpers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vuex&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> mapState <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">createNamespacedHelpers</span><span class="token punctuation">(</span><span class="token string">&quot;homeStore&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">asyncData</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> store<span class="token punctuation">,</span> route <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    store<span class="token punctuation">.</span><span class="token function">registerModule</span><span class="token punctuation">(</span><span class="token string">&quot;homeStore&quot;</span><span class="token punctuation">,</span> homeStoreModule<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 触发 action 后，会返回 Promise</span></span>
<span class="line">    <span class="token keyword">return</span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">&quot;homeStore/fetchItem&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">destroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 重要信息：当多次访问路由时，避免在客户端重复注册模块。</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">unregisterModule</span><span class="token punctuation">(</span><span class="token string">&quot;homeStore&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;item&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="客户端渲染报错-找不到动态注册-registermodule-的-module" tabindex="-1"><a class="header-anchor" href="#客户端渲染报错-找不到动态注册-registermodule-的-module"><span>客户端渲染报错：找不到动态注册 registerModule 的 module</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">index.vue:4 [vuex] module namespace not found in mapState(): homeStore/</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>服务器没有报错，正常返回 html 文件，客户端报错。比较服务器和客户端 store 的区别。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// 在 enter-server.js 打印 store，store 中包含 homeStore/</span></span>
<span class="line">context<span class="token punctuation">.</span>state <span class="token operator">=</span> store<span class="token punctuation">.</span>state<span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// _modulesNamespaceMap: [Object: null prototype] {</span></span>
<span class="line"><span class="token comment">//   &#39;route/&#39;: Module {...},</span></span>
<span class="line"><span class="token comment">//   &#39;homeStore/&#39;: Module {...}</span></span>
<span class="line"><span class="token comment">// },</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 在 enter-client.js 打印 store，store 中不包含 homeStore/</span></span>
<span class="line">store<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>__INITIAL_STATE__<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// _modulesNamespaceMap: [Object: null prototype] {</span></span>
<span class="line"><span class="token comment">//   &#39;route/&#39;: Module {...}</span></span>
<span class="line"><span class="token comment">// },</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="line"><span class="token comment">&lt;!-- src/views/home/index.vue --&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line"><span class="token keyword">import</span> homeStoreModule <span class="token keyword">from</span> <span class="token string">&quot;./homeStore&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">asyncData</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> store<span class="token punctuation">,</span> route <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    store<span class="token punctuation">.</span><span class="token function">registerModule</span><span class="token punctuation">(</span><span class="token string">&quot;homeStore&quot;</span><span class="token punctuation">,</span> homeStoreModule<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">destroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 重要信息：当多次访问路由时，避免在客户端重复注册模块。</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">unregisterModule</span><span class="token punctuation">(</span><span class="token string">&quot;homeStore&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为路由是在 asyncData 中动态注册的，enter-server.js 会调用 asyncData()，但是 enter-client.js 的初次渲染，只会<code>store.replaceState</code>，只是合并了 store.state，没有重新注册 module。</p><p>解决方案：</p><ol><li>使用 <code>store.state.module.data</code> 获取数据，不要使用 mapState；</li><li>对于首次渲染，需要在 enter-client.js 中注册 module。</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>__INITIAL_STATE__<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// store.replaceState(window.__INITIAL_STATE__);</span></span>
<span class="line">  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>__INITIAL_STATE__<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&quot;route&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    store<span class="token punctuation">.</span><span class="token function">registerModule</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">namespaced</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">state</span><span class="token operator">:</span> window<span class="token punctuation">.</span>__INITIAL_STATE__<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>https://github.com/vuejs/vuex/issues/1351</p>`,103),i=[c];function o(u,r){return a(),s("div",null,i)}const k=n(l,[["render",o],["__file","VueSSR.html.vue"]]),v=JSON.parse('{"path":"/tutorial/VueSSR.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"1. SSR 简介","slug":"_1-ssr-简介","link":"#_1-ssr-简介","children":[{"level":3,"title":"1.1 什么是 SSR？","slug":"_1-1-什么是-ssr","link":"#_1-1-什么是-ssr","children":[]},{"level":3,"title":"1.2 SSR 与 CSR","slug":"_1-2-ssr-与-csr","link":"#_1-2-ssr-与-csr","children":[]},{"level":3,"title":"1.3 你真的需要 SSR 或同构吗？","slug":"_1-3-你真的需要-ssr-或同构吗","link":"#_1-3-你真的需要-ssr-或同构吗","children":[]}]},{"level":2,"title":"2.Vue2-SSR-webpack5","slug":"_2-vue2-ssr-webpack5","link":"#_2-vue2-ssr-webpack5","children":[{"level":3,"title":"2.1 基本用法","slug":"_2-1-基本用法","link":"#_2-1-基本用法","children":[]},{"level":3,"title":"2.2 SSR 架构","slug":"_2-2-ssr-架构","link":"#_2-2-ssr-架构","children":[]},{"level":3,"title":"2.3 App.vue","slug":"_2-3-app-vue","link":"#_2-3-app-vue","children":[]},{"level":3,"title":"2.4 app.js","slug":"_2-4-app-js","link":"#_2-4-app-js","children":[]},{"level":3,"title":"2.5 router.js","slug":"_2-5-router-js","link":"#_2-5-router-js","children":[]}]},{"level":2,"title":"6. 数据预取 store.js","slug":"_6-数据预取-store-js","link":"#_6-数据预取-store-js","children":[]},{"level":2,"title":"7. entry-server.js","slug":"_7-entry-server-js","link":"#_7-entry-server-js","children":[]},{"level":2,"title":"8. entry-client.js","slug":"_8-entry-client-js","link":"#_8-entry-client-js","children":[]},{"level":2,"title":"10. webpack 配置","slug":"_10-webpack-配置","link":"#_10-webpack-配置","children":[{"level":3,"title":"10.1 基础通用配置","slug":"_10-1-基础通用配置","link":"#_10-1-基础通用配置","children":[]},{"level":3,"title":"10.2 客户端配置","slug":"_10-2-客户端配置","link":"#_10-2-客户端配置","children":[]},{"level":3,"title":"10.3 服务器配置","slug":"_10-3-服务器配置","link":"#_10-3-服务器配置","children":[]}]},{"level":2,"title":"10.setup-dev-server.js","slug":"_10-setup-dev-server-js","link":"#_10-setup-dev-server-js","children":[]},{"level":2,"title":"9. server.js","slug":"_9-server-js","link":"#_9-server-js","children":[]},{"level":2,"title":"13. 客户端激活","slug":"_13-客户端激活","link":"#_13-客户端激活","children":[]},{"level":2,"title":"3. 使用 webpack 构建配置","slug":"_3-使用-webpack-构建配置","link":"#_3-使用-webpack-构建配置","children":[]},{"level":2,"title":"动态注册 store 中的 module","slug":"动态注册-store-中的-module","link":"#动态注册-store-中的-module","children":[{"level":3,"title":"客户端渲染报错：找不到动态注册 registerModule 的 module","slug":"客户端渲染报错-找不到动态注册-registermodule-的-module","link":"#客户端渲染报错-找不到动态注册-registermodule-的-module","children":[]}]}],"git":{"updatedTime":1725262482000,"contributors":[{"name":"yaocong","email":"cong1207@qq.com","commits":1}]},"filePathRelative":"tutorial/VueSSR.md"}');export{k as comp,v as data};
